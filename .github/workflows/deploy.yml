name: Deploy GraphRAG Fact-Check API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
  AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      neo4j:
        image: neo4j:5.14.0
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Wait for Neo4j to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:7474; do sleep 2; done'
    
    - name: Run tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
      run: |
        # Test API endpoints without actual LLM calls
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from api.graphrag_fact_check import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        
        # Test health endpoint
        response = client.get('/health')
        assert response.status_code == 200
        print('‚úì Health check passed')
        
        # Test example texts endpoint
        response = client.get('/example-texts')
        assert response.status_code == 200
        data = response.json()
        assert data['total_count'] > 0
        assert len(data['examples']) > 0
        print('‚úì Example texts endpoint passed')
        
        # Test root endpoint
        response = client.get('/')
        assert response.status_code == 200
        print('‚úì Root endpoint passed')
        
        print('All tests passed!')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH key
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
        AZURE_VM_SSH_KEY: ${{ secrets.AZURE_VM_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        
        # Debug: Check if secrets are set (GitHub secrets are write-only, so we test access)
        echo "VM IP length: ${#AZURE_VM_IP}"
        echo "VM User length: ${#AZURE_VM_USER}" 
        echo "SSH Key length: ${#AZURE_VM_SSH_KEY}"
        echo "VM IP starts with: $(echo "$AZURE_VM_IP" | head -c 5)..."
        echo "VM User starts with: $(echo "$AZURE_VM_USER" | head -c 3)..."
        echo "SSH Key starts with: $(echo "$AZURE_VM_SSH_KEY" | head -c 50)..."
        
        # Check if secrets are actually set
        if [ -z "$AZURE_VM_IP" ]; then
          echo "‚ùå ERROR: AZURE_VM_IP secret is empty or not set!"
          echo "Please check GitHub repository Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        
        if [ -z "$AZURE_VM_USER" ]; then
          echo "‚ùå ERROR: AZURE_VM_USER secret is empty or not set!"
          exit 1
        fi
        
        if [ -z "$AZURE_VM_SSH_KEY" ]; then
          echo "‚ùå ERROR: AZURE_VM_SSH_KEY secret is empty or not set!"
          exit 1
        fi
        
        # Create SSH key file with proper formatting
        echo "$AZURE_VM_SSH_KEY" > ~/.ssh/azure_vm_key
        
        # Fix permissions (important!)
        chmod 600 ~/.ssh/azure_vm_key
        
        # Debug: Check key file
        echo "SSH key file size: $(wc -c < ~/.ssh/azure_vm_key)"
        echo "SSH key first line: $(head -1 ~/.ssh/azure_vm_key)"
        echo "SSH key last line: $(tail -1 ~/.ssh/azure_vm_key)"
        
        # Test SSH key format
        ssh-keygen -l -f ~/.ssh/azure_vm_key || echo "SSH key validation failed"
        
        # Add host key to known_hosts
        echo "Adding host key to known_hosts..."
        ssh-keyscan -H "$AZURE_VM_IP" >> ~/.ssh/known_hosts
        echo "Host key added to known_hosts"
        
        # Test SSH connection
        echo "Testing SSH connection..."
        ssh -i ~/.ssh/azure_vm_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$AZURE_VM_USER@$AZURE_VM_IP" "echo 'SSH connection test successful'"
    
    - name: Deploy to Azure VM
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
      run: |
        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Check if application directory exists and is a git repository
        if [ ! -d "/opt/factblock-retrieval/.git" ]; then
          echo "üìÅ Setting up application directory and repository..."
          sudo rm -rf /opt/factblock-retrieval || true
          sudo mkdir -p /opt
          sudo git clone https://github.com/factagora/factblock-retrieval.git /opt/factblock-retrieval
          sudo chown -R $(whoami):$(whoami) /opt/factblock-retrieval
        fi
        
        # Navigate to application directory
        cd /opt/factblock-retrieval
        
        # Backup current deployment if src exists
        if [ -d "src" ]; then
          sudo cp -r src src_backup_$(date +%Y%m%d_%H%M%S) || true
        fi
        
        # Pull latest changes (now we know it's a git repo)
        sudo git fetch origin
        sudo git reset --hard origin/main
        
        # Update environment if needed
        if [ ! -f .env ]; then
          echo "üìù Creating .env file..."
          echo "# Neo4j Configuration" | sudo tee .env > /dev/null
          echo "NEO4J_URI=bolt://neo4j:7687" | sudo tee -a .env > /dev/null
          echo "NEO4J_USER=neo4j" | sudo tee -a .env > /dev/null
          echo "NEO4J_PASSWORD=password" | sudo tee -a .env > /dev/null
          echo "" | sudo tee -a .env > /dev/null
          echo "# Azure OpenAI Configuration" | sudo tee -a .env > /dev/null
          echo "AZURE_OPENAI_ENDPOINT=https://factagora-aoai-eastus.openai.azure.com/" | sudo tee -a .env > /dev/null
          echo "AZURE_OPENAI_API_KEY=8f3c930c3785429e9393c55d2aae952b" | sudo tee -a .env > /dev/null
          echo "AZURE_OPENAI_DEPLOYMENT=gpt-4o" | sudo tee -a .env > /dev/null
          echo "‚úÖ Environment file created"
        fi
        
        # Build and restart services
        echo "üîÑ Rebuilding and restarting services..."
        sudo docker-compose build --no-cache api
        sudo docker-compose up -d
        
        # Wait for services to be ready
        echo "‚è≥ Waiting for services to be ready..."
        sleep 30
        
        # Health check
        echo "üè• Running health checks..."
        
        # Check Neo4j
        if curl -f http://localhost:7474 >/dev/null 2>&1; then
          echo "‚úÖ Neo4j is healthy"
        else
          echo "‚ùå Neo4j health check failed"
          exit 1
        fi
        
        # Check API
        if curl -f http://localhost:8001/health >/dev/null 2>&1; then
          echo "‚úÖ API is healthy"
        else
          echo "‚ùå API health check failed"
          exit 1
        fi
        
        # Test example texts endpoint
        if curl -f http://localhost:8001/example-texts >/dev/null 2>&1; then
          echo "‚úÖ Example texts endpoint is working"
        else
          echo "‚ùå Example texts endpoint failed"
          exit 1
        fi
        
        echo "üéâ Deployment completed successfully!"
        
        # Show deployment info
        echo "üìä Deployment Status:"
        sudo docker-compose ps
        echo ""
        echo "üåê Services available at:"
        echo "  - API: http://$(curl -s ifconfig.me):8001"
        echo "  - Neo4j: http://$(curl -s ifconfig.me):7474"
        echo "  - Health: http://$(curl -s ifconfig.me):8001/health"
        echo "  - Examples: http://$(curl -s ifconfig.me):8001/example-texts"
        EOF
        
        # Upload and execute deployment script
        scp -i ~/.ssh/azure_vm_key -o StrictHostKeyChecking=no deploy_script.sh "$AZURE_VM_USER@$AZURE_VM_IP":~/
        ssh -i ~/.ssh/azure_vm_key -o StrictHostKeyChecking=no "$AZURE_VM_USER@$AZURE_VM_IP" "chmod +x ~/deploy_script.sh && ~/deploy_script.sh"
    
    - name: Post-deployment validation
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
      run: |
        echo "üîç Running external validation..."
        
        # Wait a bit more for external access
        sleep 10
        
        # Test external API access
        if curl -f "http://$AZURE_VM_IP:8001/health"; then
          echo "‚úÖ External API access confirmed"
        else
          echo "‚ùå External API access failed"
          exit 1
        fi
        
        # Test example texts from external
        if curl -f "http://$AZURE_VM_IP:8001/example-texts" >/dev/null 2>&1; then
          echo "‚úÖ External example texts access confirmed"
        else
          echo "‚ùå External example texts access failed"
          exit 1
        fi
        
        echo "üéâ Deployment validation completed!"
    
    - name: Notification
      if: always()
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê GraphRAG API is live at: http://$AZURE_VM_IP:8001"
        else
          echo "‚ùå Deployment failed!"
        fi

  rollback:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback on failure
      run: |
        echo "üîÑ Initiating rollback..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/azure_vm_key
        chmod 600 ~/.ssh/azure_vm_key
        
        # Add host key to known_hosts
        if [ -n "${{ secrets.AZURE_VM_IP }}" ]; then
          ssh-keyscan -H "${{ secrets.AZURE_VM_IP }}" >> ~/.ssh/known_hosts
        else
          echo "Error: AZURE_VM_IP secret not set"
          exit 1
        fi
        
        # Rollback script
        cat > rollback_script.sh << 'EOF'
        #!/bin/bash
        echo "üîÑ Rolling back to previous version..."
        
        cd /opt/factblock-retrieval
        
        # Find the most recent backup
        BACKUP_DIR=$(ls -td src_backup_* 2>/dev/null | head -1)
        
        if [ -n "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
          echo "üìÅ Restoring from backup: $BACKUP_DIR"
          sudo rm -rf src
          sudo mv "$BACKUP_DIR" src
          
          # Restart services
          sudo docker-compose restart api
          
          echo "‚úÖ Rollback completed"
        else
          echo "‚ùå No backup found for rollback"
          exit 1
        fi
        EOF
        
        # Execute rollback
        scp -i ~/.ssh/azure_vm_key -o StrictHostKeyChecking=no rollback_script.sh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:~/
        ssh -i ~/.ssh/azure_vm_key -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "chmod +x ~/rollback_script.sh && ~/rollback_script.sh"